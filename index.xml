<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hizzin&#39;s Notes</title>
    <link>https://hizzins.github.io/Notes/</link>
    <description>Recent content on Hizzin&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 22 Apr 2019 09:35:59 +0900</lastBuildDate>
    
	<atom:link href="https://hizzins.github.io/Notes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>전각과 반각(일본어)</title>
      <link>https://hizzins.github.io/Notes/post/20190421/</link>
      <pubDate>Mon, 22 Apr 2019 09:35:59 +0900</pubDate>
      
      <guid>https://hizzins.github.io/Notes/post/20190421/</guid>
      <description>일본어 작업을 할때 알아두면 좋을 반각, 전각에 대해서 알아보도록 하겠습니다.
한자 문화권의 타이포그래피에서는 전각과 반각의 개념이 존재합니다. 전각(Full-width)은 정사각형 형태, 반각(Half-width)은 전각의 가로폭을 반으로 줄인 직사각형 형태라고 해서 이름에서부터 나타나듯이 같은 숫자라도 반각은 123456789으로 표현되며 전각은 １２３４５６７８９로 넓게 표현됩니다. 보기에는 사이즈만 다르고 같은 숫자로 보이지만 사실상 전각은 문자로 인식됩니다.
따라서 숫자를 입력하는 input창 같은 곳에서는 전각으로 숫자를 입력시 일반 숫자(반각)로 변환해주는 작업이 반드시 필요합니다.
 한자와 히라가나, 한글은 언제나 전각 문자에 속한다.</description>
    </item>
    
    <item>
      <title>Hugo 블로그 만들기</title>
      <link>https://hizzins.github.io/Notes/post/20190403/</link>
      <pubDate>Wed, 03 Apr 2019 14:50:24 +0900</pubDate>
      
      <guid>https://hizzins.github.io/Notes/post/20190403/</guid>
      <description>Hugo 설치하기  hugo github에서 설치파일 다운로드 및 설치해 주세요. 다운로드 받은 hugo 파일(hugo.exe, README.md, LICENSE.md들을 C:\Hugo\bin 디렉토리 생성후 넣어주세요. 어느 위치에서나 Hugo가 실행될 수 있도록$ set PATH=%PATH%;C:\Hugo\bin 명령으로 환경변수에 C:\Hugo\bin을 추가해 줍니다. $ hugo version 혹은 $ hugo help 명령어로 hugo가 잘 설치됐는지 확인할 수 있어요.  프로젝트 만들기  C:\Hugo에서 $ hugo new site &amp;lt;project&amp;gt; 명령어를 치면 으로 생성된 폴더를 확인할 수 있어요.
 폴더의 구조는 아래처럼 자동으로 생성이 됩니다.</description>
    </item>
    
    <item>
      <title>git rebase로 작성자 수정하기</title>
      <link>https://hizzins.github.io/Notes/post/20190401/</link>
      <pubDate>Mon, 01 Apr 2019 11:13:26 +0900</pubDate>
      
      <guid>https://hizzins.github.io/Notes/post/20190401/</guid>
      <description>git rebase git의 커밋 이력을 관리 할 수 있는 git rebase에 대해 정리해 보려고 합니다. git rebase는 이미 커밋한 메세지를 수정한다거나, 사소한 커밋이 여러번 발생된 경우 하나의 커밋으로 merge시킨다거나 혹은 작성자를 잘못 커밋한 경우 수정변경하는데 사용할 수 있어요.
이중에서 오늘은 작성자를 잘못 커밋한 경우에 대해 수정하는 방법을 정리해 보려고 해요. git에는 얼마나 커밋하며 활동했는지를 한눈에 볼 수 있는 초록색 도장이 찍혀있는 표가 있는데 작성자를 해당 프로젝트의 계정이 아닌 다른 계정으로 커밋할 경우 이 초록색 도장이 찍히지 않아요.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hizzins.github.io/Notes/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hizzins.github.io/Notes/about/</guid>
      <description>about page111</description>
    </item>
    
  </channel>
</rss>